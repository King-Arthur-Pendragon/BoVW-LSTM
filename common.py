"""

//[]------------------------------------------------------------------------[]
//|                                                                          |
//|                              Common Module                               |
//|                               Version 1.0                                |
//|                                                                          |
//|              Copyright 2015-2020, Marcos Vinicius Teixeira               |
//|                          All Rights Reserved.                            |
//|                                                                          |
//[]------------------------------------------------------------------------[]
//

"""


from os.path import exists, isdir, basename, isfile, join, splitext
from sklearn.feature_extraction import FeatureHasher
import sift
from glob import glob
from numpy import zeros, resize, sqrt, histogram, hstack, vstack, savetxt, zeros_like, fromstring, asarray
import scipy.cluster.vq as vq
import matplotlib.pyplot as plt
from cPickle import dump, HIGHEST_PROTOCOL
import argparse
import sys

EXTENSIONS = [".jpg", ".bmp", ".png", ".pgm", ".tif", ".tiff"]

# extracting the class names given a folder name (dataset)
def get_classes(datasetpath):
    cat_paths = [files
                 for files in glob(datasetpath + "/*")
                  if isdir(files)]

    cat_paths.sort()
    cats = [basename(cat_path) for cat_path in cat_paths]

    return cats

# getting the array of files(images) inside a given folder
def get_imgfiles(path):
    all_files = []

    all_files.extend([join(path, basename(fname))
                    for fname in glob(path + "/*")
                    if splitext(fname)[-1].lower() in EXTENSIONS])
    return all_files

# calculate the sift descriptor for each image of a input array. The output
# is saved with the same name of image file plus '.sift'
def extractSift(input_files):
    print "extracting Sift features"
    all_features_dict = {}

    for i, fname in enumerate(input_files):
        features_fname = fname + '.sift'

        if exists(features_fname) == False:
            #print "calculating sift features for", fname
            sift.process_image(fname, features_fname)

        #print "gathering sift features for", fname,
        locs, descriptors = sift.read_features_from_file(features_fname)
        print descriptors.shape
        all_features_dict[fname] = descriptors

    return all_features_dict

# transforming a dict in a numpy array
# ...
def dict2numpy(dict):
    nkeys = len(dict)
    array = zeros((nkeys * PRE_ALLOCATION_BUFFER, 128))
    pivot = 0
    for key in dict.keys():
        value = dict[key]
        nelements = value.shape[0]
        while pivot + nelements > array.shape[0]:
            padding = zeros_like(array)
            array = vstack((array, padding))
        array[pivot:pivot + nelements] = value
        pivot += nelements
    array = resize(array, (pivot, 128))
    return array

# calculating histograms given a codebook that represents the vocabulary and
# the array of descriptors, generated by each image
def computeHistograms(codebook, descriptors):
    code, dist = vq.vq(descriptors, codebook)
    histogram_of_words, bin_edges = histogram(code,
                                              bins=range(codebook.shape[0] + 1),
                                              normed=True)
    return histogram_of_words

# writing the histograms into the file 
def writeHistogramsToFile(nwords, fnames, all_word_histgrams, features_fname):
    data_rows = zeros(nwords + 1)  # +1 for the category label

    for fname in fnames:
        histogram = all_word_histgrams[fname]

        if (histogram.shape[0] != nwords):  # scipy deletes empty clusters
            nwords = histogram.shape[0]
            data_rows = zeros(nwords + 1)
        
        data_row = hstack((0, histogram))
        data_rows = vstack((data_rows, data_row))
    
    data_rows = data_rows[1:]
    fmt = '%i '
    for i in range(nwords):
        fmt = fmt + str(i) + ':%f '
    
    savetxt(features_fname, data_rows   )


# passing the codebook of string to numpy array
def stringToNumpy(codebook_file):
    codebook = []

    lines = codebook_file.readlines()

    for line in lines:
        line_array = fromstring(line,dtype=float,sep=' ')
        codebook.append(line_array)

    return asarray(codebook)